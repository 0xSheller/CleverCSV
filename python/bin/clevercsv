#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""

Author: Gertjan van den Burg

"""

import argparse
import ccsv
import sys


def exception(msg):
    print("ERROR: " + msg, file=sys.stderr)
    raise SystemExit(1)

def standardize(reader, output):
    if output is None:
        oid = sys.stdout
    else:
        oid = open(output, 'w')
    writer = ccsv.writer(oid, dialect="excel")
    for row in reader:
        writer.writerow(row)
    if not output is None:
        oid.close()

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-s",
        "--standardize",
        help="Standardize a given CSV file",
        action="store_true",
    )
    parser.add_argument(
        "-j",
        "--json-lines",
        help="Convert a CSV file to JSON lines format",
        action="store_true",
    )
    parser.add_argument(
        "-i",
        "--interactive",
        help="allow user interaction",
        action="store_true",
    )
    parser.add_argument(
        "-o",
        "--output",
        help="output file, if omitted print to stdout",
        default=None
    )
    parser.add_argument(
        "-v", "--verbose", help="be verbose", action="store_true"
    )
    parser.add_argument(
        "input", help="input csv file, if omitted assuming stdin", nargs="?"
    )
    return parser.parse_args()


def main():
    args = parse_args()
    if args.standardize and args.json_lines:
        exception(
            "Standardize and JSON-lines options are mutually exclusive. Please pick one."
        )

    enc = ccsv.utils.get_encoding(args.input)
    with open(args.input, "r", newline="", encoding=enc) as fid:
        dialect = ccsv.Detector().detect(fid.read(), verbose=args.verbose)
        fid.seek(0)
        reader = ccsv.reader(fid, dialect)

        if args.standardize:
            standardize(reader, args.output)
        elif args.json_line:
            raise NotImplementedError



if __name__ == "__main__":
    main()
